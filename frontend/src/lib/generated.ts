// Generated by @wagmi/cli@1.3.0 on 7/22/2023 at 2:45:08 AM
import {
  getContract,
  GetContractArgs,
  readContract,
  ReadContractConfig,
  writeContract,
  WriteContractArgs,
  WriteContractPreparedArgs,
  WriteContractUnpreparedArgs,
  prepareWriteContract,
  PrepareWriteContractConfig,
  watchContractEvent,
  WatchContractEventConfig,
  WatchContractEventCallback,
} from 'wagmi/actions'

import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC6551Registry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc6551RegistryABI = [
  { type: 'error', inputs: [], name: 'InitializationFailed' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'chainId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'tokenContract',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'salt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AccountCreated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenContract', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'salt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'account',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenContract', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'salt', internalType: 'uint256', type: 'uint256' },
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createAccount',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

export const erc6551RegistryAddress =
  '0x02101dfB77FDE026414827Fdc604ddAF224F0921' as const

export const erc6551RegistryConfig = {
  address: erc6551RegistryAddress,
  abi: erc6551RegistryABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccountSponsorable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accountSponsorableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_guardian', internalType: 'address', type: 'address' },
      { name: 'entryPoint_', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'AccountLocked' },
  { type: 'error', inputs: [], name: 'AlreadyApproved' },
  { type: 'error', inputs: [], name: 'ExceedsMaxLockTime' },
  { type: 'error', inputs: [], name: 'ExceedsSponsorshipsLength' },
  { type: 'error', inputs: [], name: 'FailToTransferFee' },
  { type: 'error', inputs: [], name: 'InvalidBlockNumbers' },
  { type: 'error', inputs: [], name: 'InvalidInput' },
  { type: 'error', inputs: [], name: 'NotActive' },
  { type: 'error', inputs: [], name: 'NotApproved' },
  { type: 'error', inputs: [], name: 'NotAuthorized' },
  { type: 'error', inputs: [], name: 'NotSponsorable' },
  { type: 'error', inputs: [], name: 'OwnershipCycle' },
  { type: 'error', inputs: [], name: 'SponsorshipFeeTooLow' },
  { type: 'error', inputs: [], name: 'UntrustedImplementation' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sponsorshipId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'startBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'endBlock',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'transformerAddress',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AddSponsorship',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sponsorshipId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ApproveSponsorship',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sponsorshipId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'DeactivateSponsorship',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sponsorshipId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'DisapproveSponsorship',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'lockedUntil',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'LockUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'selector',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'OverrideUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'caller',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'hasPermission',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'PermissionUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'target',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'TransactionExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  { stateMutability: 'payable', type: 'fallback' },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'startBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'transformerAddress', internalType: 'address', type: 'address' },
    ],
    name: 'addSponsorship',
    outputs: [
      { name: 'sponsorshipId', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sponsorshipId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approveSponsorship',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sponsorshipId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deactivateSponsorship',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'sponsorshipId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'disapproveSponsorship',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'entryPoint',
    outputs: [
      { name: '', internalType: 'contract IEntryPoint', type: 'address' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'executeCall',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSponsorships',
    outputs: [
      {
        name: '',
        internalType: 'struct AccountSponsorable.Sponsorship[]',
        type: 'tuple[]',
        components: [
          {
            name: 'transformerAddress',
            internalType: 'address',
            type: 'address',
          },
          { name: 'startBlock', internalType: 'uint256', type: 'uint256' },
          { name: 'endBlock', internalType: 'uint256', type: 'uint256' },
          { name: 'isApproved', internalType: 'bool', type: 'bool' },
          { name: 'isActive', internalType: 'bool', type: 'bool' },
          { name: 'fee', internalType: 'uint256', type: 'uint256' },
          { name: 'sponsor', internalType: 'address', type: 'address' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'guardian',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'caller', internalType: 'address', type: 'address' }],
    name: 'isAuthorized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isLocked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isSponsorable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: 'magicValue', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_lockedUntil', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'lock',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lockedUntil',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: 'receivedTokenId', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'overrides',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'permissions',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_isSponsorable', internalType: 'bool', type: 'bool' }],
    name: 'setIsSponsorable',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
      { name: 'implementations', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setOverrides',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'callers', internalType: 'address[]', type: 'address[]' },
      { name: '_permissions', internalType: 'bool[]', type: 'bool[]' },
    ],
    name: 'setPermissions',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'sponsorships',
    outputs: [
      { name: 'transformerAddress', internalType: 'address', type: 'address' },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'isApproved', internalType: 'bool', type: 'bool' },
      { name: 'isActive', internalType: 'bool', type: 'bool' },
      { name: 'fee', internalType: 'uint256', type: 'uint256' },
      { name: 'sponsor', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenContract', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tokenURI',
    outputs: [
      { name: 'modifiedTokenURI', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'userOp',
        internalType: 'struct UserOperation',
        type: 'tuple',
        components: [
          { name: 'sender', internalType: 'address', type: 'address' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'initCode', internalType: 'bytes', type: 'bytes' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
          { name: 'callGasLimit', internalType: 'uint256', type: 'uint256' },
          {
            name: 'verificationGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preVerificationGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'paymasterAndData', internalType: 'bytes', type: 'bytes' },
          { name: 'signature', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'userOpHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'missingAccountFunds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validateUserOp',
    outputs: [
      { name: 'validationData', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link erc6551RegistryABI}__.
 */
export function getErc6551Registry(
  config: Omit<GetContractArgs, 'abi' | 'address'>,
) {
  return getContract({
    abi: erc6551RegistryABI,
    address: erc6551RegistryAddress,
    ...config,
  })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link erc6551RegistryABI}__.
 */
export function readErc6551Registry<
  TAbi extends readonly unknown[] = typeof erc6551RegistryABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi' | 'address'>) {
  return readContract({
    abi: erc6551RegistryABI,
    address: erc6551RegistryAddress,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link erc6551RegistryABI}__.
 */
export function writeErc6551Registry<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof erc6551RegistryABI, TFunctionName>,
        'abi' | 'address'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof erc6551RegistryABI, TFunctionName>,
        'abi' | 'address'
      >,
) {
  return writeContract({
    abi: erc6551RegistryABI,
    address: erc6551RegistryAddress,
    ...config,
  } as unknown as WriteContractArgs<typeof erc6551RegistryABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link erc6551RegistryABI}__.
 */
export function prepareWriteErc6551Registry<
  TAbi extends readonly unknown[] = typeof erc6551RegistryABI,
  TFunctionName extends string = string,
>(
  config: Omit<
    PrepareWriteContractConfig<TAbi, TFunctionName>,
    'abi' | 'address'
  >,
) {
  return prepareWriteContract({
    abi: erc6551RegistryABI,
    address: erc6551RegistryAddress,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link erc6551RegistryABI}__.
 */
export function watchErc6551RegistryEvent<
  TAbi extends readonly unknown[] = typeof erc6551RegistryABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi' | 'address'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    {
      abi: erc6551RegistryABI,
      address: erc6551RegistryAddress,
      ...config,
    } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link accountSponsorableABI}__.
 */
export function getAccountSponsorable(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: accountSponsorableABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link accountSponsorableABI}__.
 */
export function readAccountSponsorable<
  TAbi extends readonly unknown[] = typeof accountSponsorableABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: accountSponsorableABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link accountSponsorableABI}__.
 */
export function writeAccountSponsorable<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof accountSponsorableABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof accountSponsorableABI,
          TFunctionName
        >,
        'abi'
      >,
) {
  return writeContract({
    abi: accountSponsorableABI,
    ...config,
  } as unknown as WriteContractArgs<
    typeof accountSponsorableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link accountSponsorableABI}__.
 */
export function prepareWriteAccountSponsorable<
  TAbi extends readonly unknown[] = typeof accountSponsorableABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: accountSponsorableABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link accountSponsorableABI}__.
 */
export function watchAccountSponsorableEvent<
  TAbi extends readonly unknown[] = typeof accountSponsorableABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: accountSponsorableABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc6551RegistryABI}__.
 */
export function useErc6551RegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc6551RegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc6551RegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractRead({
    abi: erc6551RegistryABI,
    address: erc6551RegistryAddress,
    ...config,
  } as UseContractReadConfig<
    typeof erc6551RegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc6551RegistryABI}__ and `functionName` set to `"account"`.
 */
export function useErc6551RegistryAccount<
  TFunctionName extends 'account',
  TSelectData = ReadContractResult<typeof erc6551RegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc6551RegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc6551RegistryABI,
    address: erc6551RegistryAddress,
    functionName: 'account',
    ...config,
  } as UseContractReadConfig<
    typeof erc6551RegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc6551RegistryABI}__.
 */
export function useErc6551RegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc6551RegistryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc6551RegistryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc6551RegistryABI, TFunctionName, TMode>({
    abi: erc6551RegistryABI,
    address: erc6551RegistryAddress,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc6551RegistryABI}__ and `functionName` set to `"createAccount"`.
 */
export function useErc6551RegistryCreateAccount<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc6551RegistryABI,
          'createAccount'
        >['request']['abi'],
        'createAccount',
        TMode
      > & { functionName?: 'createAccount' }
    : UseContractWriteConfig<
        typeof erc6551RegistryABI,
        'createAccount',
        TMode
      > & {
        abi?: never
        functionName?: 'createAccount'
      } = {} as any,
) {
  return useContractWrite<typeof erc6551RegistryABI, 'createAccount', TMode>({
    abi: erc6551RegistryABI,
    address: erc6551RegistryAddress,
    functionName: 'createAccount',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc6551RegistryABI}__.
 */
export function usePrepareErc6551RegistryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc6551RegistryABI, TFunctionName>,
    'abi' | 'address'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc6551RegistryABI,
    address: erc6551RegistryAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc6551RegistryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc6551RegistryABI}__ and `functionName` set to `"createAccount"`.
 */
export function usePrepareErc6551RegistryCreateAccount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc6551RegistryABI, 'createAccount'>,
    'abi' | 'address' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc6551RegistryABI,
    address: erc6551RegistryAddress,
    functionName: 'createAccount',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc6551RegistryABI,
    'createAccount'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc6551RegistryABI}__.
 */
export function useErc6551RegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc6551RegistryABI, TEventName>,
    'abi' | 'address'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc6551RegistryABI,
    address: erc6551RegistryAddress,
    ...config,
  } as UseContractEventConfig<typeof erc6551RegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc6551RegistryABI}__ and `eventName` set to `"AccountCreated"`.
 */
export function useErc6551RegistryAccountCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc6551RegistryABI, 'AccountCreated'>,
    'abi' | 'address' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc6551RegistryABI,
    address: erc6551RegistryAddress,
    eventName: 'AccountCreated',
    ...config,
  } as UseContractEventConfig<typeof erc6551RegistryABI, 'AccountCreated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__.
 */
export function useAccountSponsorableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"entryPoint"`.
 */
export function useAccountSponsorableEntryPoint<
  TFunctionName extends 'entryPoint',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'entryPoint',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"getNonce"`.
 */
export function useAccountSponsorableGetNonce<
  TFunctionName extends 'getNonce',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'getNonce',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"getSponsorships"`.
 */
export function useAccountSponsorableGetSponsorships<
  TFunctionName extends 'getSponsorships',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'getSponsorships',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"guardian"`.
 */
export function useAccountSponsorableGuardian<
  TFunctionName extends 'guardian',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'guardian',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"isAuthorized"`.
 */
export function useAccountSponsorableIsAuthorized<
  TFunctionName extends 'isAuthorized',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'isAuthorized',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"isLocked"`.
 */
export function useAccountSponsorableIsLocked<
  TFunctionName extends 'isLocked',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'isLocked',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"isSponsorable"`.
 */
export function useAccountSponsorableIsSponsorable<
  TFunctionName extends 'isSponsorable',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'isSponsorable',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useAccountSponsorableIsValidSignature<
  TFunctionName extends 'isValidSignature',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'isValidSignature',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"lockedUntil"`.
 */
export function useAccountSponsorableLockedUntil<
  TFunctionName extends 'lockedUntil',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'lockedUntil',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"nonce"`.
 */
export function useAccountSponsorableNonce<
  TFunctionName extends 'nonce',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'nonce',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useAccountSponsorableOnErc1155BatchReceived<
  TFunctionName extends 'onERC1155BatchReceived',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useAccountSponsorableOnErc1155Received<
  TFunctionName extends 'onERC1155Received',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useAccountSponsorableOnErc721Received<
  TFunctionName extends 'onERC721Received',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'onERC721Received',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"overrides"`.
 */
export function useAccountSponsorableOverrides<
  TFunctionName extends 'overrides',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'overrides',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"owner"`.
 */
export function useAccountSponsorableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"permissions"`.
 */
export function useAccountSponsorablePermissions<
  TFunctionName extends 'permissions',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'permissions',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useAccountSponsorableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"sponsorships"`.
 */
export function useAccountSponsorableSponsorships<
  TFunctionName extends 'sponsorships',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'sponsorships',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccountSponsorableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"token"`.
 */
export function useAccountSponsorableToken<
  TFunctionName extends 'token',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useAccountSponsorableTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof accountSponsorableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof accountSponsorableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accountSponsorableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof accountSponsorableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__.
 */
export function useAccountSponsorableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountSponsorableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof accountSponsorableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof accountSponsorableABI, TFunctionName, TMode>({
    abi: accountSponsorableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"addSponsorship"`.
 */
export function useAccountSponsorableAddSponsorship<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountSponsorableABI,
          'addSponsorship'
        >['request']['abi'],
        'addSponsorship',
        TMode
      > & { functionName?: 'addSponsorship' }
    : UseContractWriteConfig<
        typeof accountSponsorableABI,
        'addSponsorship',
        TMode
      > & {
        abi?: never
        functionName?: 'addSponsorship'
      } = {} as any,
) {
  return useContractWrite<
    typeof accountSponsorableABI,
    'addSponsorship',
    TMode
  >({
    abi: accountSponsorableABI,
    functionName: 'addSponsorship',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"approveSponsorship"`.
 */
export function useAccountSponsorableApproveSponsorship<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountSponsorableABI,
          'approveSponsorship'
        >['request']['abi'],
        'approveSponsorship',
        TMode
      > & { functionName?: 'approveSponsorship' }
    : UseContractWriteConfig<
        typeof accountSponsorableABI,
        'approveSponsorship',
        TMode
      > & {
        abi?: never
        functionName?: 'approveSponsorship'
      } = {} as any,
) {
  return useContractWrite<
    typeof accountSponsorableABI,
    'approveSponsorship',
    TMode
  >({
    abi: accountSponsorableABI,
    functionName: 'approveSponsorship',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"deactivateSponsorship"`.
 */
export function useAccountSponsorableDeactivateSponsorship<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountSponsorableABI,
          'deactivateSponsorship'
        >['request']['abi'],
        'deactivateSponsorship',
        TMode
      > & { functionName?: 'deactivateSponsorship' }
    : UseContractWriteConfig<
        typeof accountSponsorableABI,
        'deactivateSponsorship',
        TMode
      > & {
        abi?: never
        functionName?: 'deactivateSponsorship'
      } = {} as any,
) {
  return useContractWrite<
    typeof accountSponsorableABI,
    'deactivateSponsorship',
    TMode
  >({
    abi: accountSponsorableABI,
    functionName: 'deactivateSponsorship',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"disapproveSponsorship"`.
 */
export function useAccountSponsorableDisapproveSponsorship<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountSponsorableABI,
          'disapproveSponsorship'
        >['request']['abi'],
        'disapproveSponsorship',
        TMode
      > & { functionName?: 'disapproveSponsorship' }
    : UseContractWriteConfig<
        typeof accountSponsorableABI,
        'disapproveSponsorship',
        TMode
      > & {
        abi?: never
        functionName?: 'disapproveSponsorship'
      } = {} as any,
) {
  return useContractWrite<
    typeof accountSponsorableABI,
    'disapproveSponsorship',
    TMode
  >({
    abi: accountSponsorableABI,
    functionName: 'disapproveSponsorship',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"executeCall"`.
 */
export function useAccountSponsorableExecuteCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountSponsorableABI,
          'executeCall'
        >['request']['abi'],
        'executeCall',
        TMode
      > & { functionName?: 'executeCall' }
    : UseContractWriteConfig<
        typeof accountSponsorableABI,
        'executeCall',
        TMode
      > & {
        abi?: never
        functionName?: 'executeCall'
      } = {} as any,
) {
  return useContractWrite<typeof accountSponsorableABI, 'executeCall', TMode>({
    abi: accountSponsorableABI,
    functionName: 'executeCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"lock"`.
 */
export function useAccountSponsorableLock<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountSponsorableABI,
          'lock'
        >['request']['abi'],
        'lock',
        TMode
      > & { functionName?: 'lock' }
    : UseContractWriteConfig<typeof accountSponsorableABI, 'lock', TMode> & {
        abi?: never
        functionName?: 'lock'
      } = {} as any,
) {
  return useContractWrite<typeof accountSponsorableABI, 'lock', TMode>({
    abi: accountSponsorableABI,
    functionName: 'lock',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"setIsSponsorable"`.
 */
export function useAccountSponsorableSetIsSponsorable<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountSponsorableABI,
          'setIsSponsorable'
        >['request']['abi'],
        'setIsSponsorable',
        TMode
      > & { functionName?: 'setIsSponsorable' }
    : UseContractWriteConfig<
        typeof accountSponsorableABI,
        'setIsSponsorable',
        TMode
      > & {
        abi?: never
        functionName?: 'setIsSponsorable'
      } = {} as any,
) {
  return useContractWrite<
    typeof accountSponsorableABI,
    'setIsSponsorable',
    TMode
  >({
    abi: accountSponsorableABI,
    functionName: 'setIsSponsorable',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"setOverrides"`.
 */
export function useAccountSponsorableSetOverrides<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountSponsorableABI,
          'setOverrides'
        >['request']['abi'],
        'setOverrides',
        TMode
      > & { functionName?: 'setOverrides' }
    : UseContractWriteConfig<
        typeof accountSponsorableABI,
        'setOverrides',
        TMode
      > & {
        abi?: never
        functionName?: 'setOverrides'
      } = {} as any,
) {
  return useContractWrite<typeof accountSponsorableABI, 'setOverrides', TMode>({
    abi: accountSponsorableABI,
    functionName: 'setOverrides',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"setPermissions"`.
 */
export function useAccountSponsorableSetPermissions<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountSponsorableABI,
          'setPermissions'
        >['request']['abi'],
        'setPermissions',
        TMode
      > & { functionName?: 'setPermissions' }
    : UseContractWriteConfig<
        typeof accountSponsorableABI,
        'setPermissions',
        TMode
      > & {
        abi?: never
        functionName?: 'setPermissions'
      } = {} as any,
) {
  return useContractWrite<
    typeof accountSponsorableABI,
    'setPermissions',
    TMode
  >({
    abi: accountSponsorableABI,
    functionName: 'setPermissions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useAccountSponsorableUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountSponsorableABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<
        typeof accountSponsorableABI,
        'upgradeTo',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof accountSponsorableABI, 'upgradeTo', TMode>({
    abi: accountSponsorableABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useAccountSponsorableUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountSponsorableABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof accountSponsorableABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<
    typeof accountSponsorableABI,
    'upgradeToAndCall',
    TMode
  >({
    abi: accountSponsorableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function useAccountSponsorableValidateUserOp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountSponsorableABI,
          'validateUserOp'
        >['request']['abi'],
        'validateUserOp',
        TMode
      > & { functionName?: 'validateUserOp' }
    : UseContractWriteConfig<
        typeof accountSponsorableABI,
        'validateUserOp',
        TMode
      > & {
        abi?: never
        functionName?: 'validateUserOp'
      } = {} as any,
) {
  return useContractWrite<
    typeof accountSponsorableABI,
    'validateUserOp',
    TMode
  >({
    abi: accountSponsorableABI,
    functionName: 'validateUserOp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__.
 */
export function usePrepareAccountSponsorableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountSponsorableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accountSponsorableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accountSponsorableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"addSponsorship"`.
 */
export function usePrepareAccountSponsorableAddSponsorship(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accountSponsorableABI,
      'addSponsorship'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accountSponsorableABI,
    functionName: 'addSponsorship',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accountSponsorableABI,
    'addSponsorship'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"approveSponsorship"`.
 */
export function usePrepareAccountSponsorableApproveSponsorship(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accountSponsorableABI,
      'approveSponsorship'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accountSponsorableABI,
    functionName: 'approveSponsorship',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accountSponsorableABI,
    'approveSponsorship'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"deactivateSponsorship"`.
 */
export function usePrepareAccountSponsorableDeactivateSponsorship(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accountSponsorableABI,
      'deactivateSponsorship'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accountSponsorableABI,
    functionName: 'deactivateSponsorship',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accountSponsorableABI,
    'deactivateSponsorship'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"disapproveSponsorship"`.
 */
export function usePrepareAccountSponsorableDisapproveSponsorship(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accountSponsorableABI,
      'disapproveSponsorship'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accountSponsorableABI,
    functionName: 'disapproveSponsorship',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accountSponsorableABI,
    'disapproveSponsorship'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"executeCall"`.
 */
export function usePrepareAccountSponsorableExecuteCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountSponsorableABI, 'executeCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accountSponsorableABI,
    functionName: 'executeCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accountSponsorableABI,
    'executeCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"lock"`.
 */
export function usePrepareAccountSponsorableLock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountSponsorableABI, 'lock'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accountSponsorableABI,
    functionName: 'lock',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountSponsorableABI, 'lock'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"setIsSponsorable"`.
 */
export function usePrepareAccountSponsorableSetIsSponsorable(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accountSponsorableABI,
      'setIsSponsorable'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accountSponsorableABI,
    functionName: 'setIsSponsorable',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accountSponsorableABI,
    'setIsSponsorable'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"setOverrides"`.
 */
export function usePrepareAccountSponsorableSetOverrides(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountSponsorableABI, 'setOverrides'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accountSponsorableABI,
    functionName: 'setOverrides',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accountSponsorableABI,
    'setOverrides'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"setPermissions"`.
 */
export function usePrepareAccountSponsorableSetPermissions(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accountSponsorableABI,
      'setPermissions'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accountSponsorableABI,
    functionName: 'setPermissions',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accountSponsorableABI,
    'setPermissions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareAccountSponsorableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountSponsorableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accountSponsorableABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountSponsorableABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareAccountSponsorableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accountSponsorableABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accountSponsorableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accountSponsorableABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountSponsorableABI}__ and `functionName` set to `"validateUserOp"`.
 */
export function usePrepareAccountSponsorableValidateUserOp(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof accountSponsorableABI,
      'validateUserOp'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accountSponsorableABI,
    functionName: 'validateUserOp',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof accountSponsorableABI,
    'validateUserOp'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountSponsorableABI}__.
 */
export function useAccountSponsorableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accountSponsorableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: accountSponsorableABI,
    ...config,
  } as UseContractEventConfig<typeof accountSponsorableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountSponsorableABI}__ and `eventName` set to `"AddSponsorship"`.
 */
export function useAccountSponsorableAddSponsorshipEvent(
  config: Omit<
    UseContractEventConfig<typeof accountSponsorableABI, 'AddSponsorship'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accountSponsorableABI,
    eventName: 'AddSponsorship',
    ...config,
  } as UseContractEventConfig<typeof accountSponsorableABI, 'AddSponsorship'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountSponsorableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useAccountSponsorableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountSponsorableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accountSponsorableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof accountSponsorableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountSponsorableABI}__ and `eventName` set to `"ApproveSponsorship"`.
 */
export function useAccountSponsorableApproveSponsorshipEvent(
  config: Omit<
    UseContractEventConfig<typeof accountSponsorableABI, 'ApproveSponsorship'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accountSponsorableABI,
    eventName: 'ApproveSponsorship',
    ...config,
  } as UseContractEventConfig<
    typeof accountSponsorableABI,
    'ApproveSponsorship'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountSponsorableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useAccountSponsorableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountSponsorableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accountSponsorableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof accountSponsorableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountSponsorableABI}__ and `eventName` set to `"DeactivateSponsorship"`.
 */
export function useAccountSponsorableDeactivateSponsorshipEvent(
  config: Omit<
    UseContractEventConfig<
      typeof accountSponsorableABI,
      'DeactivateSponsorship'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accountSponsorableABI,
    eventName: 'DeactivateSponsorship',
    ...config,
  } as UseContractEventConfig<
    typeof accountSponsorableABI,
    'DeactivateSponsorship'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountSponsorableABI}__ and `eventName` set to `"DisapproveSponsorship"`.
 */
export function useAccountSponsorableDisapproveSponsorshipEvent(
  config: Omit<
    UseContractEventConfig<
      typeof accountSponsorableABI,
      'DisapproveSponsorship'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accountSponsorableABI,
    eventName: 'DisapproveSponsorship',
    ...config,
  } as UseContractEventConfig<
    typeof accountSponsorableABI,
    'DisapproveSponsorship'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountSponsorableABI}__ and `eventName` set to `"LockUpdated"`.
 */
export function useAccountSponsorableLockUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountSponsorableABI, 'LockUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accountSponsorableABI,
    eventName: 'LockUpdated',
    ...config,
  } as UseContractEventConfig<typeof accountSponsorableABI, 'LockUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountSponsorableABI}__ and `eventName` set to `"OverrideUpdated"`.
 */
export function useAccountSponsorableOverrideUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountSponsorableABI, 'OverrideUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accountSponsorableABI,
    eventName: 'OverrideUpdated',
    ...config,
  } as UseContractEventConfig<typeof accountSponsorableABI, 'OverrideUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountSponsorableABI}__ and `eventName` set to `"PermissionUpdated"`.
 */
export function useAccountSponsorablePermissionUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountSponsorableABI, 'PermissionUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accountSponsorableABI,
    eventName: 'PermissionUpdated',
    ...config,
  } as UseContractEventConfig<
    typeof accountSponsorableABI,
    'PermissionUpdated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountSponsorableABI}__ and `eventName` set to `"TransactionExecuted"`.
 */
export function useAccountSponsorableTransactionExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountSponsorableABI, 'TransactionExecuted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accountSponsorableABI,
    eventName: 'TransactionExecuted',
    ...config,
  } as UseContractEventConfig<
    typeof accountSponsorableABI,
    'TransactionExecuted'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountSponsorableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useAccountSponsorableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountSponsorableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accountSponsorableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof accountSponsorableABI, 'Upgraded'>)
}
